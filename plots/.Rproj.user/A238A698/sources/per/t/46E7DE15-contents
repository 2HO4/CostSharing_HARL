---
title: "All Plots"
output: html_notebook
---


```{r setup, include=FALSE}
# START ----
.Packages <- 'tidyverse, readxl, forecast, pracma'; {
    .Packages <- strsplit(.Packages, ', ')[[1]]
    
    .curScript <- rstudioapi::getSourceEditorContext()$path
    
    .inactive <- function() {
        if (exists('.active'))
            if (.active == .curScript)
                return (FALSE)
        return (TRUE)
    }
    
    .include <- function(p) {
        if (!is.element(p, rownames(installed.packages())))
            install.packages(p, quiet=TRUE)
        .nOldPackages <- length(.packages())
        suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))
        return (.packages()[1:(length(.packages()) - .nOldPackages)])
    }
    
    .exclude <- function(packages)
        lapply(paste0('package:', packages), function(p)
            suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
    
    if (.inactive()) {
        .prvDirectory <- getwd()
        if (exists('.allPackages')) {
            if (length(.prvPackages <- names(.allPackages)))
                .exclude(unlist(.allPackages))
        } else if (length(.packages()) > 7) {
            .exclude(.prvPackages <- .packages()[1:(length(.packages()) - 7)])
        } else
            .prvPackages <- c()
        .prvOs <- setdiff(objects(all.names=TRUE), c('.Packages', '.curScript', '.inactive', '.include', '.exclude'))
        save(list=.prvOs, file='~/R/.prvEnvironment.RData', envir=.GlobalEnv)
        rm(list=.prvOs)
        .active <- .curScript
        .allPackages <- sapply(.Packages, .include, simplify=FALSE)
    }
    
    .curDirectory <- ''
    
    if (.curDirectory == '') 
        .curDirectory <- dirname(.curScript)
    
    setwd(ifelse(.curDirectory == '', '~', .curDirectory))
    
    .oldPackages <- setdiff(names(.allPackages), .Packages)
    
    for (p in .oldPackages) {
        .exclude(.allPackages[[p]])
        .allPackages[[p]] <- NULL
    }
    
    .newPackages <- setdiff(.Packages, names(.allPackages))
    
    for (p in .newPackages)
        .allPackages[[p]] <- .include(p)
    
    rm(p)
    cat('\nCurrent File: ', ifelse(.active!='', .active, 'unsaved'), '\n\n', sep='')
}

```

```{r}
# EXECUTION ----
THEME <- theme_light() + theme(
    plot.title=element_text(color='black', size=16, face='bold', hjust=.5), 
    axis.title=element_text(color='black',size=9, face=1), 
    # aspect.ratio=1, 
    text=element_text(family='serif'), 
    # legend.key.size=unit(2, 'cm'), 
    legend.title=element_text(size=12), 
    legend.text=element_text(size=10)
)

seed <- 1
set.seed(seed)

```

```{r}
# Load the annual global GHG emissions data from ./data/total-ghg-emissions.csv. First row is the header.
ghg_emissions <- read.csv("D:/Documents/Thesis/data/total-ghg-emissions.csv", header = TRUE)

# Print the first few rows of the data
head(ghg_emissions)

# Select world data
ghg_emissions_world <- ghg_emissions %>% 
    filter(Entity == "World") %>% 
    select(Year, Emissions) %>%
    mutate(Emissions = Emissions / 1e9) # Convert to GtCO2e

# Print the summarized data
ghg_emissions_world

# Plot the data. Add more x-axis labels of the years. Label the emissions of the first and last data points in bold.
ggplot(ghg_emissions_world, aes(x=Year, y=Emissions)) +
    geom_line(color='blue') +
    # geom_point(color='blue') +
    geom_text(aes(label=ifelse(Year %in% c(min(Year), max(Year)), round(Emissions, 2), '')), hjust=.5, vjust=-.5, size=3.5, fontface='bold') + 
    geom_point(data=ghg_emissions_world %>% filter(Year %in% c(min(Year), max(Year)), Emissions == Emissions), color='black', size=1.5) +
    # scale_x_continuous(breaks=seq(min(ghg_emissions_world$Year), max(ghg_emissions_world$Year), 10)) +
    labs(title='Global Greenhouse Gas Emissions: 1850-2022', x='Year', y='Emissions (GtCO2e)') +
    THEME


```

```{r}
# Create time series data for the global GHG emissions
ghg_emissions_ts <- ts(ghg_emissions_world$Emissions, start=min(ghg_emissions_world$Year), end=max(ghg_emissions_world$Year), frequency=1)

# Create ARIMA model for the GHG emissions
arima_model_ghg <- auto.arima(ghg_emissions_ts)

# Print the model summary
summary(arima_model_ghg)

```

```{r}
# Forecast the GHG emissions until 2100
forecast_ghg <- forecast(arima_model_ghg, h=2100-2022)

# Turn forecast into a data frame. Convert the time index to numeric.
df_forecast_ghg <- data.frame(forecast_ghg)
df_forecast_ghg$time <- as.numeric(time(forecast_ghg$mean))

# Plot the forecasted GHG emissions with Times New Roman or Serif font. Also show grid in plot.
par(mar=c(4, 4, 0.2, 0.2))
plot(forecast_ghg, type='l', xlab='Year', ylab='Global emissions (GtCO2e)', main='', font.lab=2, font.main=2, family='serif')
grid(lty=1)

# Data obtained from \textcite{jones2023national}

```

```{r}
# Cumulative GHG emissions
cumulative_ghg <- cumsum(ghg_emissions_world$Emissions)
cumulative_ghg_ts <- ts(cumulative_ghg, start=min(ghg_emissions_world$Year), end=max(ghg_emissions_world$Year), frequency=1)
forecast_ghg_cumulative <- forecast(auto.arima(cumulative_ghg_ts), h=2100-2022)

# Plot the forecasted cumulative GHG emissions
par(mar=c(4, 4, 0.2, 0.2))
plot(forecast_ghg_cumulative, type='l', xlab='Year', ylab='Global cumulative emissions (GtCO2e)', main='', font.lab=2, font.main=2, family='serif')
grid(lty=1)

# Data frame for forecasted cumulative GHG emissions relative to pre-industrial levels
forecast_ghg_cumulative_pre_industrial <- data.frame(forecast_ghg_cumulative) - cumulative_ghg[length(cumulative_ghg)] + 41
# forecast_ghg_cumulative_pre_industrial <- rbind(data.frame(Point.Forecast=41, Lo.80=0, Hi.80=0, Lo.95=0, Hi.95=0, row.names=2022), forecast_ghg_cumulative_pre_industrial)

# Plot the forecasted cumulative GHG emissions relative to pre-industrial levels
ggplot(forecast_ghg_cumulative_pre_industrial, aes(x=as.numeric(row.names(forecast_ghg_cumulative_pre_industrial)), y=Point.Forecast)) +
    geom_line(color='blue') +
    geom_ribbon(aes(ymin=Lo.95, ymax=Hi.95), fill='lightgrey', alpha=0.2) +
    geom_ribbon(aes(ymin=Lo.80, ymax=Hi.80), fill='darkgrey', alpha=0.2) +
    labs(title='Forecasted Cumulative GHG Emissions Relative to Pre-Industrial Levels', x='Year', y='Emissions (GtCO2e)') +
    THEME



```

```{r}
year_start <- as.numeric(row.names(forecast_ghg_cumulative_pre_industrial)[1])
year_end <- 2100

pracma::interp1(
    year_start:year_end, 
    forecast_ghg_cumulative_pre_industrial[['Point.Forecast']], 
    seq(year_start, year_end, length.out=52*(year_end - year_start))
)

```

```{r}
# Df of interpolated forecasted cumulative GHG emissions
years <- year_start:year_end
weeks <- seq(year_start, year_end, length.out=52*(year_end - year_start))
df_forecast_ghg_cumulative_pre_industrial <- data.frame(
    Time=weeks,
    Emissions=pracma::interp1(years, forecast_ghg_cumulative_pre_industrial[['Point.Forecast']], weeks), 
    Lo80=pracma::interp1(years, forecast_ghg_cumulative_pre_industrial[['Lo.80']], weeks),
    Hi80=pracma::interp1(years, forecast_ghg_cumulative_pre_industrial[['Hi.80']], weeks),
    Lo95=pracma::interp1(years, forecast_ghg_cumulative_pre_industrial[['Lo.95']], weeks),
    Hi95=pracma::interp1(years, forecast_ghg_cumulative_pre_industrial[['Hi.95']], weeks)
)

tail(df_forecast_ghg_cumulative_pre_industrial, (2100 - 2024)*52)

```

```{r}
# Save the forecasted cumulative GHG emissions
write.csv(
    tail(df_forecast_ghg_cumulative_pre_industrial, (2100 - 2024)*52), 
    'D:/Documents/Thesis/forecasts/forecast_cumulativeghgemissions.csv', row.names=FALSE
)

```

```{r}
# Select US data
gasoline_ghg_emissions_us <- ghg_emissions %>% 
    filter(Entity == "United States") %>% 
    select(Year, Emissions) %>%
    mutate(Emissions = Emissions*.22 / 1e9) # adjust to 22% emission from motor gasoline and convert to GtCO2e

# Print the summarized data
gasoline_ghg_emissions_us

# Plot the data. Add more x-axis labels of the years. Label the emissions of the first and last data points in bold.
ggplot(gasoline_ghg_emissions_us, aes(x=Year, y=Emissions)) +
    geom_line(color='blue') +
    # geom_point(color='blue') +
    geom_text(aes(label=ifelse(Year %in% c(min(Year), max(Year)), round(Emissions, 2), '')), hjust=.5, vjust=-1.5, size=3.5, fontface='bold') + 
    geom_point(data=gasoline_ghg_emissions_us %>% filter(Year %in% c(min(Year), max(Year)), Emissions == Emissions), color='black', size=1.5) +
    # scale_x_continuous(breaks=seq(min(gasoline_ghg_emissions_us$Year), max(gasoline_ghg_emissions_us$Year), 10)) +
    labs(title='US Greenhouse Gas Emissions from Motor Gasoline: 1990-2022', x='Year', y='Emissions (GtCO2e)') +
    THEME

```

```{r}
# Create time series data for the US GHG emissions from motor gasoline
ghg_emissions_us_yearly_ts <- ts(gasoline_ghg_emissions_us$Emissions, start=min(gasoline_ghg_emissions_us$Year), end=max(gasoline_ghg_emissions_us$Year), frequency=1)

# Create ARIMA model for the US GHG emissions from motor gasoline
arima_model_ghg_us_yearly <- auto.arima(ghg_emissions_us_yearly_ts)

# Save the ARIMA model of US emissions
saveRDS(arima_model_ghg_us_yearly, file = "D:/Documents/Thesis/analyses/models/model_ghg_us_yearly.rds")

# Print the model summary
summary(arima_model_ghg_us_yearly)

```

```{r}
# Forecast the US GHG emissions from motor gasoline until 2100
arima_model_ghg_us_yearly <- readRDS("D:/Documents/Thesis/analyses/models/model_ghg_us_yearly.rds")
forecast_ghg_us_yearly <- forecast(arima_model_ghg_us_yearly, h=2100-2022)

# Turn forecast into a data frame. Convert the time index to numeric.
df_forecast_ghg_us_yearly <- data.frame(forecast_ghg_us_yearly)
df_forecast_ghg_us_yearly$time <- as.numeric(time(forecast_ghg_us_yearly$mean))

# Plot the forecasted US GHG emissions from motor gasoline with Times New Roman or Serif font. Also show grid in plot.
par(mar=c(4, 4, 0.2, 0.2))
plot(forecast_ghg_us_yearly, type='l', xlab='Year', ylab='U.S. motor gasoline emissions (GtCO2e)', main='', font.lab=2, font.main=2, family='serif')
grid(lty=1)

# Data obtained from \textcite{jones2023national}

```

```{r}
# Define the custom function
create_weekly_time_series <- function(annual_values) {
    # Initialize an empty list to store weekly values
    weekly_values <- list()
    
    # Loop through each year and calculate weekly values
    for (year in annual_values$Year) {
        annual_value <- annual_values$Emissions[annual_values$Year == year]
        portions_total <- sum(1:52)
        
        # Calculate weekly values
        weekly_values_for_year <- sapply(1:52, function(week) {
            weekly_value <- annual_value/52
            return(weekly_value)
        })
        
        # Append the weekly values to the list
        weekly_values[[as.character(year)]] <- weekly_values_for_year
    }
    
    # Convert the list to a data frame with one column of weekly values
    # weekly_values_df <- data.frame(Emissions=matrix(unlist(weekly_values), nrow=length(unlist(weekly_values)), byrow=TRUE))
    
    # Add the year column to the data frame
    # weekly_values_df$Year <- rep(annual_values$Year, each=52)
    
    # Return the data frame
    return(unlist(weekly_values))
}


gasoline_ghg_emissions_us_weekly <- create_weekly_time_series(gasoline_ghg_emissions_us)

# Print the weekly time series data
gasoline_ghg_emissions_us_weekly[1:9]

# Plot the weekly time series data
plot(gasoline_ghg_emissions_us_weekly, type='l', xlab='Week', ylab='Emissions (GtCO2e)', main='US GHG Emissions from Motor Gasoline: 1990-2022', font.lab=2, font.main=2, family='serif')


```

```{r}
y <- min(gasoline_ghg_emissions_us$Year):max(gasoline_ghg_emissions_us$Year)
w <- seq(min(gasoline_ghg_emissions_us$Year), max(gasoline_ghg_emissions_us$Year), length.out=52*(max(gasoline_ghg_emissions_us$Year) - min(gasoline_ghg_emissions_us$Year)))
# e <- interp1(y, gasoline_ghg_emissions_us$Emissions, w)

# Create time series data for the US motor gasoline GHG emissions
ghg_emissions_us_ts <- ts(gasoline_ghg_emissions_us_weekly, start=c(min(y), 1), frequency=52)

# Create ARIMA model for the US GHG emissions
arima_model_ghg_us <- auto.arima(ghg_emissions_us_ts)

# Save the ARIMA model of US emissions
saveRDS(arima_model_ghg_us, file = "D:/Documents/Thesis/analyses/models/model_ghg_us.rds")

# Print the model summary
summary(arima_model_ghg_us)

```

```{r}
# Forecast the US motor gasoline GHG emissions until 2100
arima_model_ghg_us <- readRDS("D:/Documents/Thesis/analyses/models/model_ghg_us.rds")
forecast_ghg_us <- forecast(arima_model_ghg_us, h=3944 + 80)

# Turn forecast into a data frame. Convert the time index to numeric.
df_forecast_ghg_us <- data.frame(forecast_ghg_us)
df_forecast_ghg_us$time <- as.numeric(time(forecast_ghg_us$mean))

# Plot the forecasted US motor gasoline GHG emissions with Times New Roman or Serif font. Also show grid in plot.
par(mar=c(4, 4, 0.2, 0.2))
plot(forecast_ghg_us, type='l', xlab='Year', ylab='U.S. motor gasoline emissions (GtCO2e)', main='', font.lab=2, font.main=2, family='serif')
grid(lty=1)

# Data obtained from \textcite{jones2023national}

```

```{r}
# Cumulative US motor gasoline GHG emissions
cumulative_ghg_us <- cumsum(gasoline_ghg_emissions_us_weekly)
cumulative_ghg_us_ts <- ts(cumulative_ghg_us, start=c(min(y), 1), frequency=52)

forecast_ghg_us_cumulative <- forecast(auto.arima(cumulative_ghg_us_ts), h=3944 + 80)

# Plot the forecasted cumulative US motor gasoline GHG emissions
plot(forecast_ghg_us_cumulative, type='l', xlab='Year', ylab='Emissions (GtCO2e)', main='Forecasted Cumulative US GHG Emissions from Motor Gasoline: 2023-2100', font.lab=2, font.main=2, family='serif')
grid(lty=1)

# Data frame for forecasted cumulative US motor gasoline GHG emissions relative to pre-industrial levels
forecast_ghg_us_cumulative_pre_industrial <- data.frame(forecast_ghg_us_cumulative) - cumulative_ghg_us[length(cumulative_ghg_us)] + 41*.1105*.22

# Plot the forecasted cumulative US motor gasoline GHG emissions relative to pre-industrial levels
ggplot(forecast_ghg_us_cumulative_pre_industrial, aes(x=as.numeric(row.names(forecast_ghg_us_cumulative_pre_industrial)), y=Point.Forecast)) +
    geom_line(color='blue') +
    geom_ribbon(aes(ymin=Lo.95, ymax=Hi.95), fill='lightgrey', alpha=0.2) +
    geom_ribbon(aes(ymin=Lo.80, ymax=Hi.80), fill='darkgrey', alpha=0.2) +
    labs(title='Forecasted Cumulative US GHG Emissions from Motor Gasoline', x='Year', y='Emissions (GtCO2e)') +
    THEME

```

```{r}
# Df of interpolated forecasted cumulative US motor gasoline GHG emissions
df_forecast_ghg_us_cumulative_pre_industrial <- cbind(Week=1:3944, forecast_ghg_us_cumulative_pre_industrial[81:4024,])

df_forecast_ghg_us_cumulative_pre_industrial

```

```{r}
# Save the forecasted cumulative US moqtor gasoline GHG emissions
write.csv(
    df_forecast_ghg_us_cumulative_pre_industrial,
    'D:/Documents/Thesis/forecasts/forecast_cumulativeghgusemissions.csv', row.names=FALSE
)

```

```{r}
# Cumulative yearly US motor gasoline GHG emissions
cumulative_ghg_us_yearly <- cumsum(gasoline_ghg_emissions_us$Emissions)
cumulative_ghg_us_yearly_ts <- ts(cumulative_ghg_us_yearly, start=min(gasoline_ghg_emissions_us$Year), end=max(gasoline_ghg_emissions_us$Year), frequency=1)
forecast_ghg_us_cumulative_yearly <- forecast(auto.arima(cumulative_ghg_us_yearly_ts), h=2100-2022)

# Plot the forecasted cumulative yearly US motor gasoline GHG emissions
# png("D:/Documents/Thesis/back-up/plots/cumulative_emissions_us.png", width=800, height=400, units='px', res=600)
par(mar=c(4, 4, 0.2, 0.2))
plot(forecast_ghg_us_cumulative_yearly, type='l', xlab='Year', ylab='U.S. cumulative emissions (GtCO2e)', main='', font.lab=2, font.main=2, family='serif')
grid(lty=1)
# dev.off()

# Data frame for forecasted cumulative yearly US motor gasoline GHG emissions relative to pre-industrial levels
forecast_ghg_us_cumulative_yearly_pre_industrial <- data.frame(forecast_ghg_us_cumulative_yearly) - cumulative_ghg_us_yearly[length(cumulative_ghg_us_yearly)] + 41*.1105*.22

# Plot the forecasted cumulative yearly US motor gasoline GHG emissions relative to pre-industrial levels
ggplot(forecast_ghg_us_cumulative_yearly_pre_industrial, aes(x=as.numeric(row.names(forecast_ghg_us_cumulative_yearly_pre_industrial)), y=Point.Forecast)) +
    geom_line(color='blue') +
    geom_ribbon(aes(ymin=Lo.95, ymax=Hi.95), fill='lightgrey', alpha=0.2) +
    geom_ribbon(aes(ymin=Lo.80, ymax=Hi.80), fill='darkgrey', alpha=0.2) +
    labs(title='Forecasted Cumulative US GHG Emissions from Motor Gasoline', x='Year', y='Emissions (GtCO2e)') +
    THEME

```


```{r}
p <- ggplot() +
    geom_line(forecast_ghg_cumulative_pre_industrial, mapping=aes(x=as.numeric(row.names(forecast_ghg_cumulative_pre_industrial)), y=Point.Forecast), color='blue') +
    geom_ribbon(forecast_ghg_cumulative_pre_industrial, mapping=aes(x=as.numeric(row.names(forecast_ghg_cumulative_pre_industrial)), y=Point.Forecast, ymin=Lo.95, ymax=Hi.95), fill='lightgrey', alpha=0.2) +
    geom_ribbon(forecast_ghg_cumulative_pre_industrial, mapping=aes(x=as.numeric(row.names(forecast_ghg_cumulative_pre_industrial)), y=Point.Forecast, ymin=Lo.80, ymax=Hi.80), fill='darkgrey', alpha=0.2) +
    geom_line(forecast_ghg_us_cumulative_yearly_pre_industrial, mapping=aes(x=as.numeric(row.names(forecast_ghg_us_cumulative_yearly_pre_industrial)), y=Point.Forecast), color='red') +
    geom_ribbon(forecast_ghg_us_cumulative_yearly_pre_industrial, mapping=aes(x=as.numeric(row.names(forecast_ghg_us_cumulative_yearly_pre_industrial)), y=Point.Forecast, ymin=Lo.95, ymax=Hi.95), fill='lightgrey', alpha=0.2) +
    geom_ribbon(forecast_ghg_us_cumulative_yearly_pre_industrial, mapping=aes(x=as.numeric(row.names(forecast_ghg_us_cumulative_yearly_pre_industrial)), y=Point.Forecast, ymin=Lo.80, ymax=Hi.80), fill='darkgrey', alpha=0.2) +
    labs(title='', x='Year', y='Cumulative emissions (GtCO2e)') +
    THEME

ggsave("D:/Documents/Thesis/back-up/plots/emissions_cumulative_us_world.png", p, width=1920, height=1080, units='px', dpi=300)

p


```

```{r}
d <- read.csv("forecasts/forecast_demand_withshock1.csv", header=TRUE, row.names=1)

d


```






```{r}
median(forecast(auto.arima(ts(read_excel("./data/USWeeklyProductSupplied.xlsx", sheet="Data 1", col_names=c("Date", "n_barrels_total", "n_barrels_motorgasoline"), range="A17:C1755") %>% select(n_barrels_motorgasoline), start=c(1991, 6), frequency=52)), h=3944)$mean)+

```

```{r}
# Load the data from ./data/Greenhouse Gas Inventory Data Explorer  US EPA.csv
ghg_us <- read.csv("data/Greenhouse Gas Inventory Data Explorer  US EPA.csv", header=TRUE, row.names=1)

ghg_us_ts <- ts(as.numeric(ghg_us['Total', ]), start=1990, end=2021, frequency=1)
m <- auto.arima(ghg_us_ts)
forecast_ghg_us <- forecast(m, h=2100-2021)

plot(forecast_ghg_us, type='l', xlab='Year', ylab='Emissions (GtCO2e)', main='Forecasted US GHG Emissions: 2022-2100', font.lab=2, font.main=2, family='serif')

```

```{r}
# Load ./data/historical_emissions.csv
historical_emissions <- data.frame(t(read.csv("data/historical_emissions.csv", header=TRUE) %>% 
    filter(ISO %in% c('WORLD', 'USA')) %>% 
    select(-c(Country, Data.source, Sector, Gas, Unit))))

colnames(historical_emissions) <- historical_emissions[1, ]

historical_emissions <- historical_emissions[-1, ] %>% 
    mutate(across(everything(), as.numeric)) %>% 
    slice(nrow(historical_emissions):1) %>% 
    mutate(Percentage=round(100 * USA / WORLD, 2))

historical_emissions

```

```{r}
# Create time series of the percentage of US GHG emissions relative to global emissions
us_ghg_percentage_ts <- ts(historical_emissions$Percentage, start=1990, end=2021, frequency=1)

# Create ARIMA model for the US GHG emissions percentage
us_ghg_percentage_arima <- auto.arima(us_ghg_percentage_ts)

# Forecast the US GHG emissions percentage until 2100
us_ghg_percentage_forecast <- forecast(us_ghg_percentage_arima, h=2100-2021)

# Plot the forecasted US GHG emissions percentage
plot(us_ghg_percentage_forecast, type='l', xlab='Year', ylab='Percentage', main='Forecasted US GHG Emissions Percentage: 2022-2100', font.lab=2, font.main=2, family='serif')

```

```{r}
historical_emissions <- ghg_emissions %>% 
    filter(Code %in% c("USA", "OWID_WRL")) %>% 
    select(Code, Year, Emissions) %>%
    pivot_wider(names_from=Code, values_from=Emissions) %>% 
    mutate(Percentage=round(100 * USA / OWID_WRL, 2))

historical_emissions
    
```

```{r}
# Create time series of the percentage of US GHG emissions relative to global emissions
us_ghg_percentage_ts <- ts(historical_emissions$Percentage, start=1850, end=2022, frequency=1)

# Create ARIMA model for the US GHG emissions percentage
us_ghg_percentage_arima <- auto.arima(us_ghg_percentage_ts)

# Forecast the US GHG emissions percentage until 2100
us_ghg_percentage_forecast <- forecast(us_ghg_percentage_arima, h=2100-2022)

# Plot the forecasted US GHG emissions percentage
plot(us_ghg_percentage_forecast, type='l', xlab='Year', ylab='Percentage', main='Forecasted US GHG Emissions Percentage: 2023-2100', font.lab=2, font.main=2, family='serif')

us_ghg_percentage_forecast

```

```{r}
# END ----
if (0) {
    if (!exists('.Packages')) {  # create default sessions
        if (length(.packages()) > 7)
            lapply(paste0('package:', .packages()[1:(length(.packages()) - 7)]), function(p) 
                suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
        rm(list=objects(all.names=TRUE))
        setwd('~')
    }
    
    else{  # restore previous script
        if (length(.allPackages))
            lapply(paste0('package:', unlist(.allPackages)), function(p) 
                suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
        rm(list=objects(all.names=TRUE))
        load('~/R/.prvEnvironment.RData')
        invisible(lapply(.prvPackages, function(p) 
            suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))))
        setwd(.prvDirectory)
        rm(.prvPackages, .prvDirectory)
    }
    
    cat('\n', ifelse(exists('.active'), paste('Current File:', .active), 'R session reset...'), '\n\n', sep='')
}

```
