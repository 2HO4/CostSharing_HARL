---
title: "Results of MARL Models"
output: html_notebook
---

```{r setup, include=FALSE}
# START ----
.Packages <- 'tidyverse, gridExtra, scales'; {
    .Packages <- strsplit(.Packages, ', ')[[1]]
    
    .curScript <- rstudioapi::getSourceEditorContext()$path
    
    .inactive <- function() {
        if (exists('.active'))
            if (.active == .curScript)
                return (FALSE)
        return (TRUE)
    }
    
    .include <- function(p) {
        if (!is.element(p, rownames(installed.packages())))
            install.packages(p, quiet=TRUE)
        .nOldPackages <- length(.packages())
        suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))
        return (.packages()[1:(length(.packages()) - .nOldPackages)])
    }
    
    .exclude <- function(packages)
        lapply(paste0('package:', packages), function(p)
            suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
    
    if (.inactive()) {
        .prvDirectory <- getwd()
        if (exists('.allPackages')) {
            if (length(.prvPackages <- names(.allPackages)))
                .exclude(unlist(.allPackages))
        } else if (length(.packages()) > 7) {
            .exclude(.prvPackages <- .packages()[1:(length(.packages()) - 7)])
        } else
            .prvPackages <- c()
        .prvOs <- setdiff(objects(all.names=TRUE), c('.Packages', '.curScript', '.inactive', '.include', '.exclude'))
        save(list=.prvOs, file='~/R/.prvEnvironment.RData', envir=.GlobalEnv)
        rm(list=.prvOs)
        .active <- .curScript
        .allPackages <- sapply(.Packages, .include, simplify=FALSE)
    }
    
    .curDirectory <- ''
    
    if (.curDirectory == '') 
        .curDirectory <- dirname(.curScript)
    
    setwd(ifelse(.curDirectory == '', '~', .curDirectory))
    
    .oldPackages <- setdiff(names(.allPackages), .Packages)
    
    for (p in .oldPackages) {
        .exclude(.allPackages[[p]])
        .allPackages[[p]] <- NULL
    }
    
    .newPackages <- setdiff(.Packages, names(.allPackages))
    
    for (p in .newPackages)
        .allPackages[[p]] <- .include(p)
    
    rm(p)
    cat('\nCurrent File: ', ifelse(.active!='', .active, 'unsaved'), '\n\n', sep='')
}

```

```{r}
# EXECUTION ----
THEME <- theme_light() + theme(
    plot.background = element_rect(fill='transparent', color=NA), 
    plot.title=element_text(color='black', size=14, face='bold', hjust=.5), 
    axis.title=element_text(color='black',size=9, face=1), 
    axis.text=element_text(color='black', size=8),
    # aspect.ratio=0.5,
    text=element_text(family='serif'),
    # legend.key.size=unit(2, 'cm'), 
    legend.title=element_text(size=9),
    legend.text=element_text(size=9)
)

seed <- 1
set.seed(seed)

```

```{r}
# Results of models with different cost functions

# Main folder
folder <- "cost_functions_homo"

# Subfolders
subfolders <- c("duopoly", "duopoly_linear", "duopoly_concave")

# Filenames to be combined
filenames <- c(
  "agent0_actor_grad_norm_agent0_actor_grad_norm_.csv",
  "agent1_actor_grad_norm_agent1_actor_grad_norm_.csv",
  "critic_average_step_rewards_critic_average_step_rewards_.csv",
  "train_episode_rewards_aver_rewards_.csv"
)

# Types of cost function
types_cost_function <- c("Convex", "Linear", "Concave")

# List to store the combined data
combined_data <- list()

# Loop over each filename
for (filename in filenames) {
  # Initialize an empty list to store data from each subfolder
  data_list <- list()
  
  # Loop over each subfolder
  for (i in 1:3) {
    # Construct the full file path
    file_path <- file.path(folder, subfolders[i], filename)
    
    # Read the CSV file
    data <- read.csv(file_path)
    
    # Add a column indicating the cost function
    data$`Cost functions` <- types_cost_function[i]
    
    # Add the data frame to the list
    data_list[[subfolders[i]]] <- data
  }
  
  # Add argument to remove row names
  data_list[["make.row.names"]] <- FALSE
  
  # Combine data from all subfolders into one data frame
  combined_data[[filename]] <- do.call(rbind, data_list)
}

# Save the combined data frames into individual variables
agent0_actor_grad_norm <- combined_data[[filenames[1]]]
agent1_actor_grad_norm <- combined_data[[filenames[2]]]
critic_average_step_rewards <- combined_data[[filenames[3]]]
train_episode_rewards <- combined_data[[filenames[4]]]

```

```{r}
# Plot the results of the models with different cost functions

# Define custom colors
custom_colors <- c("Convex"="red2", "Linear"="green3", "Concave"="blue3")

# Plot the actor gradient norms
plot_agn0 <- ggplot(agent0_actor_grad_norm, aes(x=Step, y=Value, color=`Cost functions`)) +
    geom_line(size=0.5, alpha=0.75, position=position_dodge(w=0.1)) +
    geom_point(size=0.3) +
    labs(title="", x="Step", y="Firm 0 - Actor Gradient Norm") + 
    scale_color_manual(values=custom_colors) +
    scale_x_continuous(labels=comma) +
    scale_y_continuous(labels=comma) +
    THEME + 
    theme(legend.position="bottom")

plot_agn1 <- ggplot(agent1_actor_grad_norm, aes(x=Step, y=Value, color=`Cost functions`)) +
    geom_line(size=0.5, alpha=0.75, position=position_dodge(w=0.1)) +
    geom_point(size=0.3) +
    labs(title="", x="Step", y="Firm 1 - Actor Gradient Norm") +
    scale_color_manual(values=custom_colors) +
    scale_x_continuous(labels=comma) +
    scale_y_continuous(labels=comma) +
    THEME + 
    theme(legend.position="bottom")

# Plot the critic average step rewards
plot_casr <- ggplot(critic_average_step_rewards, aes(x=Step, y=Value, color=`Cost functions`)) +
    geom_line(size=0.5, alpha=0.75, position=position_dodge(w=0.1)) +
    geom_point(size=0.3) +
    labs(title="", x="Step", y="Critic Average Step Rewards") +
    scale_color_manual(values=custom_colors) +
    scale_x_continuous(labels=comma) +
    scale_y_continuous(labels=comma) +
    THEME + 
    theme(legend.position="bottom")

# Plot the training episode rewards
plot_tere <- ggplot(train_episode_rewards, aes(x=Step, y=Value, color=`Cost functions`)) + 
    geom_line(size=0.5, alpha=0.75, position=position_dodge(w=0.1)) +
    geom_point(size=0.3) +
    labs(title="", x="Step", y="Training Episode Rewards") +
    scale_color_manual(values=custom_colors) +
    scale_x_continuous(labels=comma) +
    scale_y_continuous(labels=comma) +
    THEME + 
    theme(legend.position="bottom")

# Display the plots
plot_agn0
plot_agn1
plot_casr
plot_tere

```

```{r}
# PLot those data in the same plot as a plot with 4 plots inside

# Helper function to extract the legend from a ggplot
g_legend <- function(a.gplot) {
  tmp <- ggplotGrob(a.gplot)
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}

# Extract the legend from one of the plots
legend <- g_legend(plot_agn0)

# Combine the plots into a 1x4 grid and add the legend at the bottom
plot_combined <- arrangeGrob(
  arrangeGrob(
    plot_agn0 + theme(legend.position="none"),
    plot_agn1 + theme(legend.position="none"),
    plot_casr + theme(legend.position="none"),
    plot_tere + theme(legend.position="none"),
    ncol=4
  ),
  legend,
  nrow=2,
  heights=c(10, 1)
)

# Save the combined plot
ggsave("results_models_cost_functions.png", plot_combined, width=20, height=3, units="in", dpi=600)

# Combine the plots into a 2x2 grid and add the legend at the bottom
plot_combined2 <- arrangeGrob(
  arrangeGrob(
    plot_agn0 + theme(legend.position="none", plot.margin = unit(c(0, 0.1, 0, 0), "cm")),
    plot_agn1 + theme(legend.position="none", plot.margin = unit(c(0, 0, 0, 0.1), "cm")), 
    plot_casr + theme(legend.position="none", plot.margin = unit(c(0, 0.1, 0, 0), "cm")),
    plot_tere + theme(legend.position="none", plot.margin = unit(c(0, 0, 0, 0.1), "cm")), 
    ncol=2
  ),
  legend,
  nrow=2,
  heights=c(10, 1)
)

# Save the combined plot
ggsave("results_models_cost_functions2x2.png", plot_combined2, width=20, height=6, units="in", dpi=600)

```

```{r}
# Results of models with different price characteristics of heterogeneous agents

# Main folder
folder <- "prices_characteristics_hete"

# Subfolders
subfolders <- c("duopoly_hete", "duopoly_hete_pf", "duopoly_hete_pf_quota", "duopoly_hete_quota")

# Filenames to be combined
filenames <- c("train_episode_rewards_aver_rewards.csv")

# Types of price characteristics
types_price_characteristics <- c("Constant price", "Price fluctuation", "Price fluctuation and quota", "Constant price and quota")

# List to store the combined data
combined_data <- list()

# Loop over each filename
for (filename in filenames) {
  # Initialize an empty list to store data from each subfolder
  data_list <- list()
  
  # Loop over each subfolder
  for (i in 1:4) {
    # Construct the full file path
    file_path <- file.path(folder, subfolders[i], filename)
    
    # Read the CSV file
    data <- read.csv(file_path)
    
    # Add a column indicating the price characteristic
    data$`Heterogeneous firms` <- types_price_characteristics[i]
    
    # Add the data frame to the list
    data_list[[subfolders[i]]] <- data
  }
  
  # Add argument to remove row names
  data_list[["make.row.names"]] <- FALSE
  
  # Combine data from all subfolders into one data frame
  combined_data[[filename]] <- do.call(rbind, data_list)
}

# Save the combined data frames into individual variables
train_episode_rewards_prices_characteristics_hete <- combined_data[[filenames[1]]]

```

```{r}
# Plot the results of the models with different price characteristics of heterogeneous agents

# Define custom colors
custom_colors <- c("Constant price"="red2", "Price fluctuation"="green3", "Price fluctuation and quota"="blue3", "Constant price and quota"="purple2")

# Plot the training episode rewards
plot_terpc_he <- ggplot(train_episode_rewards_prices_characteristics_hete, aes(x=Step, y=Value, color=`Heterogeneous firms`)) +
    geom_line(size=0.5, alpha=0.75, position=position_dodge(w=0.1)) +
    geom_point(size=0.3) +
    labs(title="", x="Step", y="Training Episode Rewards") +
    scale_color_manual(values=custom_colors) +
    scale_x_continuous(labels=comma) +
    scale_y_continuous(labels=comma) +
    THEME + 
    theme(legend.position="bottom")

# Display the plot
plot_terpc_he

```

```{r}
# Results of models with different price characteristics of homogeneous agents

# Main folder
folder <- "prices_characteristics_homo"

# Subfolders
subfolders <- c("duopoly", "duopoly_pf", "duopoly_pf_quota", "duopoly_quota")

# Filenames to be combined
filenames <- c("train_episode_rewards_aver_rewards.csv")

# Types of price characteristics
types_price_characteristics <- c("Constant price", "Price fluctuation", "Price fluctuation and quota", "Constant price and quota")

# List to store the combined data
combined_data <- list()

# Loop over each filename
for (filename in filenames) {
  # Initialize an empty list to store data from each subfolder
  data_list <- list()
  
  # Loop over each subfolder
  for (i in 1:4) {
    # Construct the full file path
    file_path <- file.path(folder, subfolders[i], filename)
    
    # Read the CSV file
    data <- read.csv(file_path)
    
    # Add a column indicating the price characteristic
    data$`Homogeneous firms` <- types_price_characteristics[i]
    
    # Add the data frame to the list
    data_list[[subfolders[i]]] <- data
  }
  
  # Add argument to remove row names
  data_list[["make.row.names"]] <- FALSE
  
  # Combine data from all subfolders into one data frame
  combined_data[[filename]] <- do.call(rbind, data_list)
}

# Save the combined data frames into individual variables
train_episode_rewards_prices_characteristics_homo <- combined_data[[filenames[1]]]


```

```{r}
# Plot the results of the models with different price characteristics of homogeneous agents

# Define custom colors (different from the colors of heterogeneous agents)
custom_colors <- c("Constant price"="orangered2", "Price fluctuation"="gold3", "Price fluctuation and quota"="olivedrab3", "Constant price and quota"="slateblue3")

# Plot the training episode rewards
plot_terpc_ho <- ggplot(train_episode_rewards_prices_characteristics_homo, aes(x=Step, y=Value, color=`Homogeneous firms`)) +
    geom_line(size=0.5, alpha=0.75, position=position_dodge(w=0.1)) +
    geom_point(size=0.3) +
    labs(title="", x="Step", y="Training Episode Rewards") +
    scale_color_manual(values=custom_colors) +
    scale_x_continuous(labels=comma) +
    scale_y_continuous(labels=comma) +
    THEME + 
    theme(legend.position="bottom")

# Display the plot
plot_terpc_ho

```

```{r}
# PLot those data in the same plot as a plot with 2 plots inside

plot_combined_pc <- arrangeGrob(
    plot_terpc_he + theme(plot.margin = unit(c(0, 0.1, 0, 0), "cm")), 
    plot_terpc_ho + theme(plot.margin = unit(c(0, 0, 0, 0.1), "cm")), 
    ncol=2
)

# Save the combined plot
ggsave("results_models_prices_characteristics.png", plot_combined_pc, width=20, height=3, units="in", dpi=600)

```

```{r}
# Results of models with different numbers of heterogeneous agents

# Main folder
folder <- "n_firms_hete"

# Subfolders
subfolders <- c("monopoly", "duopoly_hete", "tripoly_hete", "firms04_hete", "firms12_hete")

# Filenames to be combined
filenames <- c("train_episode_rewards_aver_rewards.csv")

# Types of number of firms
types_n_firms <- c("Monopoly", "Duopoly", "Tripoly", "Oligopoly (4 firms)", "Competition (12 firms)")

# List to store the combined data
combined_data <- list()

# Loop over each filename
for (filename in filenames) {
  # Initialize an empty list to store data from each subfolder
  data_list <- list()
  
  # Loop over each subfolder
  for (i in 1:5) {
    # Construct the full file path
    file_path <- file.path(folder, subfolders[i], filename)
    
    # Read the CSV file
    data <- read.csv(file_path)
    
    # Add a column indicating the number of firms
    data$`Heterogeneous firms` <- types_n_firms[i]
    
    # Add the data frame to the list
    data_list[[subfolders[i]]] <- data
  }
  
  # Add argument to remove row names
  data_list[["make.row.names"]] <- FALSE
  
  # Combine data from all subfolders into one data frame
  combined_data[[filename]] <- do.call(rbind, data_list)
}

# Save the combined data frames into individual variables
train_episode_rewards_n_firms_hete <- combined_data[[filenames[1]]]

```

```{r}
# Plot the results of the models with different numbers of heterogeneous agents

# Define custom colors
custom_colors <- c("Monopoly"="red2", "Duopoly"="green3", "Tripoly"="blue3", "Oligopoly (4 firms)"="purple2", "Competition (12 firms)"="orange3")

# Plot the training episode rewards
plot_ternf_he <- ggplot(train_episode_rewards_n_firms_hete, aes(x=Step, y=Value, color=`Heterogeneous firms`)) +
    geom_line(size=0.5, alpha=0.75, position=position_dodge(w=0.1)) +
    geom_point(size=0.3) +
    labs(title="", x="Step", y="Training Episode Rewards") +
    scale_color_manual(values=custom_colors) +
    scale_x_continuous(labels=comma) +
    scale_y_continuous(labels=comma) +
    THEME + 
    theme(legend.position="bottom")

# Display the plot
plot_ternf_he

```

```{r}
# Results of models with different numbers of homogeneous agents

# Main folder
folder <- "n_firms_homo"

# Subfolders
subfolders <- c("monopoly", "duopoly", "tripoly", "firms04", "firms12")

# Filenames to be combined
filenames <- c("train_episode_rewards_aver_rewards.csv")

# Types of number of firms
types_n_firms <- c("Monopoly", "Duopoly", "Tripoly", "Oligopoly (4 firms)", "Competition (12 firms)")

# List to store the combined data
combined_data <- list()

# Loop over each filename
for (filename in filenames) {
  # Initialize an empty list to store data from each subfolder
  data_list <- list()
  
  # Loop over each subfolder
  for (i in 1:5) {
    # Construct the full file path
    file_path <- file.path(folder, subfolders[i], filename)
    
    # Read the CSV file
    data <- read.csv(file_path)
    
    # Add a column indicating the number of firms
    data$`Homogeneous firms` <- types_n_firms[i]
    
    # Add the data frame to the list
    data_list[[subfolders[i]]] <- data
  }
  
  # Add argument to remove row names
  data_list[["make.row.names"]] <- FALSE
  
  # Combine data from all subfolders into one data frame
  combined_data[[filename]] <- do.call(rbind, data_list)
}

# Save the combined data frames into individual variables
train_episode_rewards_n_firms_hete <- combined_data[[filenames[1]]]

```

```{r}
# Plot the results of the models with different numbers of homogeneous agents

# Define custom colors (different from the colors of heterogeneous agents)
custom_colors <- c("Monopoly"="red2", "Duopoly"="gold3", "Tripoly"="olivedrab3", "Oligopoly (4 firms)"="slateblue3", "Competition (12 firms)"="darkorange3")

# Plot the training episode rewards
plot_ternf_ho <- ggplot(train_episode_rewards_n_firms_hete, aes(x=Step, y=Value, color=`Homogeneous firms`)) +
    geom_line(size=0.5, alpha=0.75, position=position_dodge(w=0.1)) +
    geom_point(size=0.3) + 
    labs(title="", x="Step", y="Training Episode Rewards") +
    scale_color_manual(values=custom_colors) +
    scale_x_continuous(labels=comma) +
    scale_y_continuous(labels=comma) +
    THEME + 
    theme(legend.position="bottom")

# Display the plot
plot_ternf_ho

```

```{r}
# PLot those data in the same plot as a plot with 2 plots inside

plot_combined_nf <- arrangeGrob(
    plot_ternf_he + theme(plot.margin = unit(c(0, 0.1, 0, 0), "cm")), 
    plot_ternf_ho + theme(plot.margin = unit(c(0, 0, 0, 0.1), "cm")), 
    ncol=2
)

# Save the combined plot
ggsave("results_models_n_firms.png", plot_combined_nf, width=20, height=3, units="in", dpi=600)

```

```{r}
# Results of models with heterogeneous or homogeneous duopoly

# Main folders
folders <- c("n_firms_hete", "n_firms_homo")

# Subfolders
subfolder <- "duopoly"

# Filenames to be combined
filename <- "train_episode_rewards_aver_rewards.csv"

# Types of group of firms
types_group_firms <- c("Heterogeneous", "Homogeneous")

# Save the combined data frames
train_episode_rewards_monopoly <- rbind(
    mutate(read.csv(file.path(folders[1], subfolder, filename)), Duopoly=types_group_firms[1]),
    mutate(read.csv(file.path(folders[2], subfolder, filename)), Duopoly=types_group_firms[2])
)

```

```{r}
# Plot the results of the models with  heterogeneous or homogeneous monopolists

custom_colors <- c(Heterogeneous="red2", Homogeneous="gold3")
plot_ter_mono <-  ggplot(train_episode_rewards_monopoly, aes(x=Step, y=Value, color=Monopoly)) +
    geom_line(size=0.5, alpha=0.75, position=position_dodge(w=0.1)) +
    geom_point(size=0.3) + 
    labs(title="", x="Step", y="Training Episode Rewards") +
    scale_color_manual(values=custom_colors) +
    scale_x_continuous(labels=comma) +
    scale_y_continuous(labels=comma) +
    THEME + 
    theme(legend.position="bottom")

# Display the plot
plot_ter_mono

```



